一、树定义：
      树是一些节点的集合，除了叶子节点，每个节点都有多个后驱节点。叶子节点无后驱节点（根节点加若干子树构成）。
二、树的相关定义：
      父节点：
      子节点：
      根节点：
      叶节点：
      叶子节点：
      兄弟节点：
      节点高度：节点到叶子节点的最长路径
      节点深度：节点到根节点的最长罗京
      节点层数：节点深度加1
      树的高度：根节点的高度

三、二叉树定义：
      除了叶子节点，每个节点最多有两个后驱节点，两个后驱节点，分别叫左子节点，和右子节点。

四、满二叉树定义：
       所有叶子节点都在最底层，且除了叶子节点以外的节点都有左子节点和右子节点
五、完全二叉树：
       所有叶子节点都在最低层和倒数第二层，除叶子节点以外每个节点都有左子节点和右子节点，且最后一层叶子节点靠左排列

六、为什么完全二叉树定义要求最底层叶子节点要靠左排列？
      当二叉树通过数组存储时。并且按照下述方式存储时，任意节点存在数组下标为i的位置，该节点的左子节点存在数组下标为
       2*i的位置，右子节点存在数组下标为2*i+1的位置（根节点存在数据下标为1的位置）。完全二叉树不会浪费内存空间。
七、二叉树遍历
     1、前序遍历：对于树中任意节点，先打印该节点本身，然后打印左子树，最后打印右子树
     2、中序遍历：对于树中任意节点，先打印该节点的左子树，然后打印该节点本身，最后打印右子树
     3、后序遍历：对于树中任意节点，先打印该节点的左子树，然后打印该节点的右子树，最后打印该节点本身
     注：前、中、后序，表示的是节点与它的左右子树节点遍历打印的先后顺序
 八、二叉查找树定义：
     二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于
     这个节点的值
九、二叉查找树缺点：
     在动态插入和删除的过程中容易使树退化成链表从而使树的性能降低

十、平衡二叉树定义：
     二叉树中任意一个节点的左右子树的高度相差不能大于 1（AVL树严格符合该定义）

十一、红黑树定义：
        一种不严格的平衡二叉查找树
       要求：
               1、节点是红色或者黑色（每个节点除了存储数据和指针外还要存储个表示红黑颜色的标志位） 
               2、根节点是黑色的
               3、每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据（简化代码实现）
               4、每个红色节点的两个字节点都是黑色，（从根节点到任意叶子节点的所有路径中不能出现两个连续的红色）
               5、任意节点到达其每个叶子节点的所有路径中的黑色节点数目相同

     
   十二、红黑树？   
           特性：从根节点到任意叶子节点的最长路径不会大于最短路径（时间复杂度仍保持logn级别）